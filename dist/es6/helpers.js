"use strict";

const touchEnabled = "ontouchstart" in document.documentElement;
const pressEvent   = touchEnabled ? "touchend" : "click";


/** Name of the onTransitionEnd event supported by this browser. */
const transitionEnd = (function(){
	for(var names = "transitionend webkitTransitionEnd oTransitionEnd otransitionend".split(" "), i = 0; i < 4; ++i)
		if("on"+names[i].toLowerCase() in window) return names[i];
	return names[0];
}());



/**
 * Stop a function from firing too quickly.
 *
 * Returns a copy of the original function that runs only after the designated
 * number of milliseconds have elapsed. Useful for throttling onResize handlers.
 *
 * @param {Number} limit - Threshold to stall execution by, in milliseconds.
 * @param {Boolean} soon - If TRUE, will call the function *before* the threshold's elapsed, rather than after.
 * @return {Function}
 */
function debounce(fn, limit, soon){
	var limit = limit < 0 ? 0 : limit,
		started, context, args, timer,

		delayed = function(){

			/** Get the time between now and when the function was first fired. */
			var timeSince = Date.now() - started;

			if(timeSince >= limit){
				if(!soon) fn.apply(context, args);
				if(timer) clearTimeout(timer);
				timer = context = args = null;
			}

			else timer = setTimeout(delayed, limit - timeSince);
		};


	/** Debounced copy of the original function. */
	return function(){
		context = this,
		args    = arguments;

		if(!limit)
			return fn.apply(context, args);

		started = Date.now();
		if(!timer){
			if(soon) fn.apply(context, args);
			timer = setTimeout(delayed, limit);
		}
	};
};



const uniqueID = (function(){
	var IDs     = {};
	var indexes = {};
	
	
	/**
	 * Generate a unique ID for a DOM element.
	 *
	 * By default, minimalist IDs like "_1" or "_2" are generated using internally
	 * tracked incrementation. Uglier, more collision-proof IDs can be generated by
	 * passing a truthy value to the function's first argument.
	 *
	 * Irrespective of whether values are being generated simply or randomly, the
	 * document tree is always consulted first to ensure a duplicate ID is never
	 * returned.
	 *
	 * @param {String}  prefix - Prefix prepended to result. Default: "_"
	 * @param {Boolean} random - Generate collision-proof IDs using random symbols
	 * @param {Number}  length - Length of random passwords. Default: 6
	 * @return {String}
	 */
	function uniqueID(prefix, complex, length){
		length     = +(length || 6);
		var result =  (prefix = prefix || "_");
		
		/** Simple IDs */
		if(!complex){
			
			/** Set this prefix's starting index if it's not been used yet */
			if(!indexes[prefix])
				indexes[prefix] = 0;
			
			result += ++indexes[prefix];
		}
		
		/** Uglier/safer IDs */
		else{
			var chars   = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
			chars      += chars.toLowerCase();
			result     += chars[ Math.round(Math.random() * (chars.length - 1)) ];
			chars      += "0123456789";
			
			while(result.length < length)
				result += chars[ Math.round(Math.random() * (chars.length - 1))];
		}
		
		return IDs[result] || document.getElementById(result)
			? uniqueID(prefix, complex)
			: (IDs[result] = true, result);
	}
	
	
	return uniqueID;
}());


export default { touchEnabled, pressEvent, transitionEnd, debounce, uniqueID };
